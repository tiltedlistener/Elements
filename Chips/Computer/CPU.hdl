/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /* TEST FOR CODE OR DESTINATION TO A-REGISTER */
    /*
        Code Formats:
        - 111accccccdddjjj
        - 0[ANY ADDRESS]
    */
    And(a=true,b=instruction[15],out=testForCodeOrAddress);

    /* BREAK UP DESTINATION CODE */
    /*
        Have these be the load codes for these registers: A, D, M
        However, you must confirm that they are Computed instructions not memory loads
    */

    /* BREAK UP JMP CODE */
    /*
        Test here for less than, equal to or greater than zero
        
        Provided by the ALU:
        if (out==0) set zr = 1
        if (out<0) set ng = 1       
    */
    /*
        I'm well aware I could have just built my own Mux8 for 1-bit inputs
    */
    // Test for Greater than
    Not(in=zr,out=notZr);
    Not(in=ng,out=notNg);
    And(a=notZr,b=notNg,out=greaterThanZeroResult);
    Or16(a=false,b[0]=greaterThanZeroResult,b[1..15]=false,out=greaterThanZeroResult16);

    // Test for greater than or equal to zero
    Or(a=greaterThanZeroResult,b=zr,out=greaterThanOrEqualToResult);
    Or16(a=false,b[0]=greaterThanOrEqualToResult,b[1..15]=false,out=greaterThanOrEqualToResult16);

    // Test for less than or qual to zero
    Or(a=zr,b=ng,out=lessThanOrEqualToResult);
    Or16(a=false,b[0]=lessThanOrEqualToResult,b[1..15]=false,out=lessThanOrEqualToResult16);    

    // Change zr to 16-bit
    Or16(a=false,b[0]=zr, b[1..15]=false,out=zr16);
    // Change notZr to 16-bit
    Or16(a=false,b[0]=notZr, b[1..15]=false,out=notZr16);
    // Change ng to 16-bit
    Or16(a=false,b[0]=ng, b[1..15]=false,out=ng16);

    // Final division to decide if we should load an instruction
    Mux8Way16(a=false,b=greaterThanZeroResult16,c=zr16,d=greaterThanOrEqualToResult16,e=ng16,f=notZr16,g=lessThanOrEqualToResult16,h=true,sel=instruction[0..2],out=jmpDirective16,out[0..7]=jmpDirectiveHalf);

    // Now settle back into 1-bit operators since we're just determing if 
    Or8Way(in=jmpDirectiveHalf,out=jmpDirectiveBit);
    And(a=jmpDirectiveBit,b=testForCodeOrAddress,out=jmpDirective);  
    /* END JMP CODE RESULTS */


    // CPU Counter
    // First check if we are jumping or incrementing
    Not(in=jmpDirective,out=inc);
    PC(reset=reset, load=jmpDirective, inc=inc, in=aOut, out=counter,out[0..14]=pc);


    /** Registers **/
    // A-Register
    // The Mux here determines if we're setting A from a result of the ALU command or from the LOAD command
    // Also this based on the compute results
    Mux16(a=instruction,b=aluOutM,sel=testForCodeOrAddress,out=muxToARegister);
    And(a=testForCodeOrAddress,b=instruction[5],out=aLoadByInstruction);
    Not(in=testForCodeOrAddress,out=confirmedAddress);
    Or(a=confirmedAddress,b=aLoadByInstruction,out=aLoad);
    ARegister(in=muxToARegister,load=aLoad,out=aOut);

    // D-Register
    And(a=testForCodeOrAddress,b=instruction[4],out=dLoad);
    DRegister(in=aluOutM,load=dLoad,out=dOut);
    /* END REGISTERS */

    /* OUTPUT TO MEMORY */
    /* writeM */
    And(a=testForCodeOrAddress,b=instruction[3], out=writeM);
    /* addressM */
    Or16(a=false,b=aOut,out=addressMFull,out[0..14]=addressM);

    /** ALU **/
    // Determined compute code
    And(out=loadMorA,a=true,b=instruction[12]);
    Mux16(a=aOut,b=inM,sel=loadMorA,out=AslashM);

    /* DECODE COMPUTE CODE */
    /*
        Code keys are between: instruction[6..11]
    */
    // ALU start
    ALU(x=dOut,y=AslashM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=aluOutM,zr=zr,ng=ng);
    /* END ALU */

    
}