// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out hold the value
 * stored at the memory location specified by address. If load=1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out after the next time step.)
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:

    // Choose between the different chips
    DMux8Way(sel=address[3..5], in=load, a=a,b=b,c=c,d=d,e=e,f=f,g=g,h=h);

    // Memory Group
    RAM8(in=in, out=out0, address=address[0..2], load=a);
    RAM8(in=in, out=out1, address=address[0..2], load=b);
    RAM8(in=in, out=out2, address=address[0..2], load=c);
    RAM8(in=in, out=out3, address=address[0..2], load=d); 
    RAM8(in=in, out=out4, address=address[0..2], load=e);
    RAM8(in=in, out=out5, address=address[0..2], load=f);
    RAM8(in=in, out=out6, address=address[0..2], load=g);
    RAM8(in=in, out=out7, address=address[0..2], load=h);   

    // Display final result
    Mux8Way16(sel=address[3..5], out=out, a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7);


}