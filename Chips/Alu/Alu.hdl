/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
    // X operators
    // First zx = 1, x = 0
    Mux16(a=x, b=false, sel=zx, out=zxOut);
    // Second nx
    Not16(in=zxOut, out=xNot);
    Mux16(a=zxOut,b=xNot, sel=nx, out=finalX);

    // Y Operators
    // First zy = 1, y = 0
    Mux16(a=y, b=false, sel=zy, out=zyOut);
    // Second ny
    Not16(in=zyOut, out=yNot);
    Mux16(a=zyOut,b=yNot, sel=ny, out=finalY);

    // F Operators
    // Compute x + y 
    Add16(a=finalX, b=finalY, out=addXY);
    // Compute x & y
    And16(a=finalX, b=finalY, out=andXY);
    Mux16(sel=f, a=andXY, b=addXY, out=fRes);

    // Out Operator and ng
    Not16(in=fRes, out=NotfRes);
    Mux16(a=fRes,b=NotfRes, sel=no, out=out, 
            out[0]=preout0, 
            out[1]=preout1,
            out[2]=preout2, 
            out[3]=preout3,
            out[4]=preout4, 
            out[5]=preout5,
            out[6]=preout6, 
            out[7]=preout7,
            out[8]=preout8, 
            out[9]=preout9,
            out[10]=preout10, 
            out[11]=preout11,
            out[12]=preout12, 
            out[13]=preout13,
            out[14]=preout14, 
            out[15]=preout15,
            out[15]=ng
            );
    
    // zr output
    FullAdder(a=preout0, b=true, c=false, sum=sum1, carry=car1);
    FullAdder(a=preout1, b=true, c=car1, sum=sum2, carry=car2);
    FullAdder(a=preout2, b=true, c=car2, sum=sum3, carry=car3);    
    FullAdder(a=preout3, b=true, c=car3, sum=sum4, carry=car4);
    FullAdder(a=preout4, b=true, c=car4, sum=sum5, carry=car5);
    FullAdder(a=preout5, b=true, c=car5, sum=sum6, carry=car6);
    FullAdder(a=preout6, b=true, c=car6, sum=sum7, carry=car7);    
    FullAdder(a=preout7, b=true, c=car7, sum=sum8, carry=car8);    
    FullAdder(a=preout8, b=true, c=car8, sum=sum9, carry=car9);
    FullAdder(a=preout9, b=true, c=car9, sum=sum10, carry=car10);
    FullAdder(a=preout10, b=true, c=car10, sum=sum11, carry=car11);    
    FullAdder(a=preout11, b=true, c=car11, sum=sum12, carry=car12);
    FullAdder(a=preout12, b=true, c=car12, sum=sum13, carry=car13);
    FullAdder(a=preout13, b=true, c=car13, sum=sum14, carry=car14);
    FullAdder(a=preout14, b=true, c=car14, sum=sum15, carry=car15);    
    FullAdder(a=preout15, b=true, c=car15, sum=sum16, carry=car16);    
    Not(in=car16, out=zr, out=prezr);

     
}